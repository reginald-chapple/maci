# Generated by Django 4.2.8 on 2024-01-01 23:38

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.managers
import uuid
import validators.lowercase_validator


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(blank=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Lowercase letters, numbers, and @/./+/-/_ only.', max_length=30, unique=True, validators=[validators.lowercase_validator.LowercaseValidator()], verbose_name='user name')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='email address')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='full name')),
                ('phone_number', models.CharField(blank=True, max_length=16, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format '123456789'. Up to 15 digits allowed.", regex='^1?\\d{9,15}$')], verbose_name='phone number')),
                ('birthdate', models.DateField(blank=True, null=True, verbose_name='birthdate')),
                ('gender', models.CharField(blank=True, choices=[('Female', 'Female'), ('Male', 'Male')], max_length=14, null=True, verbose_name='gender')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='members/%Y/%m/%d/', verbose_name='photo')),
                ('address', models.CharField(blank=True, max_length=50, null=True, verbose_name='address')),
                ('city', models.CharField(blank=True, max_length=50, null=True, verbose_name='city')),
                ('country', models.CharField(blank=True, max_length=50, null=True, verbose_name='country')),
                ('state', models.CharField(blank=True, max_length=50, null=True, verbose_name='state')),
                ('zip', models.CharField(blank=True, max_length=12, null=True, verbose_name='zip')),
                ('borrowers_rating', models.FloatField(blank=True, default=0.0, verbose_name="borrower's rating")),
                ('loaners_rating', models.FloatField(blank=True, default=0.0, verbose_name="loaner's rating")),
                ('is_member', models.BooleanField(blank=True, default=False, verbose_name='member status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', users.managers.AppUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'skill',
                'verbose_name_plural': 'skills',
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], verbose_name='day of week')),
                ('opening_time', models.TimeField(blank=True, verbose_name='opening time')),
                ('closing_time', models.TimeField(blank=True, verbose_name='closing time')),
                ('provider', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to=settings.AUTH_USER_MODEL, verbose_name='provider')),
            ],
            options={
                'verbose_name': 'schedule',
                'verbose_name_plural': 'schedules',
            },
        ),
    ]
